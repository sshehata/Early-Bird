package engine.journal;

import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;

/**
 * @author Samy Shihata 
 * @author Ali Said  
 *
 */
public class DreamManager {

	private class Year {
		private Month[] months;

		public Year() {
			months = new Month[12];
		}
	}

	private class Month {
		private Day[] days;

		public Month(int d) {
			days = new Day[d];
		}
	}

	private class Day {
		private LinkedList<Dream> dreams;

		public Day() {
			dreams = new LinkedList<Dream>();
		}
	}

	private HashMap<Integer, Year> years;

	public DreamManager() {
		// find a way to persist
		years = new HashMap<Integer, Year>();
	}

	public void addDream(Dream dream, Date date) {
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		Year year = years.get(cal.get(Calendar.YEAR));
		if (year == null) {
			year = new Year();
			years.put(cal.get(Calendar.YEAR), year);
		}

		Month month = year.months[cal.get(Calendar.MONTH)];
		if (month == null) {
			int m = cal.get(Calendar.MONTH);
			int y = cal.get(Calendar.YEAR);
			if (m == 2) {
				month = new Month((y % 4 == 0) && (y % 100 != 0)
						|| (y % 400 == 0) ? 29 : 28);
			} else if (m <= 7) {
				if (m % 2 == 0)
					month = new Month(30);
				else
					month = new Month(31);
			} else {
				if (m % 2 == 0)
					month = new Month(31);
				else
					month = new Month(30);
			}
		}

		Day day = month.days[cal.get(Calendar.DAY_OF_MONTH)];
		if (day == null)
			day = new Day();
		day.dreams.add(dream);
	}

	public void deleteDream(Date date, int i) {
		accessDay(date).dreams.remove(i);
	}

	public LinkedList<Dream> getDay(Date date) {
		return accessDay(date).dreams;
	} 

	private Day accessDay(Date date) {
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		Year year = years.get(cal.get(Calendar.YEAR));
		Month month = year.months[cal.get(Calendar.MONTH)];
		return month.days[cal.get(Calendar.DAY_OF_MONTH)];
	}
}
